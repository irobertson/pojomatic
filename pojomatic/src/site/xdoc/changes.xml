<?xml version="1.0" encoding="ISO-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Changes in Pojomatic</title>
  </properties>
  <body>
    <section name="Changes in Pojomatic">
      <subsection name="Release 2.1.0 (2018-10-14)">
        <ul>
          <li>
            Pojomatic now relies on ASM directly, instead of the repacked org.kohsuke:asm5 library.
            In particular, this means it is now compatible with Java versions 7 through
            11. Moreover, as newer Java releases come out, it should be possible to upgrade to a
            newer ASM version without a new release of pojomatic. Fixes
            <a href="https://github.com/irobertson/pojomatic/issues/10">GitHub issue #10</a>.
          </li>
          <li>
            Pojomatic has been modularized under the name org.pojomatic. It can of course continue
            to be used as a jar, as well as now using it as a module.
            <a href="https://github.com/irobertson/pojomatic/issues/13">GitHub issue #13</a>.
          </li>
          <li>
            Fix <a href="https://github.com/irobertson/pojomatic/issues/11">GitHub issue #11</a> -
            generated doEquals method only considers properties also selected for hashCode.
          </li>
        </ul>
      </subsection>
      <subsection name="Release 2.0.1 (2014-07-12)">
        <ul>
          <li>
            Upgrade to ASM 5 to fix <a href="https://github.com/irobertson/pojomatic/issues/4">GitHub issue #4</a>:
            Under Java8 ASM classreader fails.
          </li>
        </ul>
      </subsection>
      <subsection name="Release 2.0 (2014-06-29)">
        <ul>
          <li>Pojomatic now requires Java version 7 or higher</li>
          <li>
            Pojomators are now created by generating byte code. The generated code uses InvokeDynamic rather than
            ordinary reflection to access properties.
          </li>
          <li>
            Because, as of Java 7, the order in which fields and methods are returned by the Reflection API has become
            somewhat arbitrary, ASM is used to visit the byte code used to define the class, and determine the order
            of properties from that.
          </li>
          <li>
            <a href="apidocs/index.html?org/pojomatic/formatter/PojoFormatter.html">PojoFormatter</a> has been
            deprecated in favor of the new
            <a href="apidocs/index.html?org/pojomatic/formatter/EnhancedPojoFormatter.html">EnhancedPojoFormatter</a>.
            Similarly,
            <a href="apidocs/index.html?org/pojomatic/formatter/DefaultPojoFormatter.html">DefaultPojoFormatter</a> has been
            deprecated in favor of the new
            <a href="apidocs/index.html?org/pojomatic/formatter/DefaultEnhancedPojoFormatter.html">DefaultEnhancedPojoFormatter</a>.
          </li>
          <li>
            <a href="apidocs/index.html?org/pojomatic/formatter/PropertyFormatter.html">PropertyFormatter</a> has been
            deprecated in favor of the new
            <a href="apidocs/index.html?org/pojomatic/formatter/EnhancedPropertyFormatter.html">EnhancedPropertyFormatter</a>.
            Similarly,
            <a href="apidocs/index.html?org/pojomatic/formatter/DefaultPropertyFormatter.html">DefaultPropertyFormatter</a> has been
            deprecated in favor of the new
            <a href="apidocs/index.html?org/pojomatic/formatter/DefaultEnhancedPropertyFormatter.html">DefaultEnhancedPropertyFormatter</a>.
          </li>
          <li>
            New annotation,
            <a href="apidocs/index.html?org/pojomatic/annotations/SkipArrayCheck.html">SkipArrayCheck</a>, provides an
            optimization for fields of type Object which should never be treated as arrays.
          </li>
        </ul>
      </subsection>
      <subsection name="Release 1.0 (2010-04-25)">
        <ul>
          <li>
            Simplification of the Differences API.  As part of this simplification,
            <code><a href="apidocs/org/pojomatic/Pojomatic.html#diff%28T,%20S%29">Pojomatic.diff</a></code>
            now requires that both arguments be non-null.
          </li>
          <li>
            Add new method, <a href="apidocs/org/pojomatic/Pojomatic.html#areCompatibleForEquals(java.lang.Class,%20java.lang.Class)">Pojomatic.areCompatibleForEquals</a>.
          </li>
        </ul>
      </subsection>
      <subsection name="Release 1.0-RC3 (2009-12-06)">
        <ul>
          <li>
            <code><a href="apidocs/org/pojomatic/Pojomatic.html#equals%28T,%20java.lang.Object%29">Pojomatic.equals()</a></code>
            now properly handles inheritance, including comparing instances of two separate child
            classes of a parent class
             (<a class="externalLink" href="https://sourceforge.net/tracker/?func=detail&amp;aid=2845939&amp;group_id=239113&amp;atid=1108645">bug 2845939</a>).
          </li>
          <li>A <code>Pojomator</code> can now be created for an interface.</li>
          <li>
            New annotations,
            <code><a href="apidocs/index.html?org/pojomatic/annotations/OverridesEquals.html">OverridesEquals</a></code>
            and
            <code><a href="apidocs/index.html?org/pojomatic/annotations/SubclassCannotOverrideEquals.html">SubclassCannotOverrideEquals</a></code>
            <code>SubclassCannotOverrideEquals</code> help control how inheritance is handled.
          </li>
          <li>
            Properties from the parent class now come before those of the child in
            <code>equals</code> calculations and in the <code>toString()</code> representation.
          </li>
          <li>
            Pojomatic will no longer add a method property multiple times if it is overridden
            (even if the overridden method is explicitly annotated).
          </li>
          <li>
            <code><a href="apidocs/org/pojomatic/Pojomatic.html#diff%28T,%20S%29">Pojomatic.diff</a></code>
            no longer requires a non-null first argument.
          </li>
        </ul>
      </subsection>
      <subsection name="Release 1.0-RC2 (2009-04-07)">
        <ul>
          <li>
            A new method, <code><a href="apidocs/org/pojomatic/Pojomatic.html#diff%28T,%20S%29">Pojomatic.diff</a></code>,
            will show top-level differences between two instances of a pojomated class.
          </li>
          <li>
            The property name derived from a method such as getFoo() is now "foo" instead
            of "getFoo" in the default <code>toString()</code> representation.
          </li>
          <li>
            Names of properties in the default <code>toString()</code> representation can be overridden
            via the <code>name</code> attribute on the <code>Property</code> annotation.
          </li>
          <li>
            Static fields and methods are no longer picked up by <code>@AutoProperty</code>
            (<a class="externalLink" href="https://sourceforge.net/tracker/?func=detail&amp;aid=2739467&amp;group_id=239113&amp;atid=1108645">bug 2739467</a>)
          </li>
        </ul>
      </subsection>
      <subsection name="Release 1.0-RC1 (2009-01-01)">
        <ul>
          <li>Initial Release</li>
        </ul>
      </subsection>
    </section>
  </body>
</document>
